# -*- coding: utf-8 -*-
"""
Created on Thu May 11 10:10:53 2023

@author: colbu
"""
import numpy as np
import os

"""
==========================================
PVT files follow the format of 
Time, Displacement, output velocity,
Time, Displacement, output velocity,

for a single stage that is moving. the output velocity will be the output velocity of the next step
so if you would like the stage to pause somewhere you need to put a 0 at the end of that step. This is not 
the same as the velocity that the stage will execute the step with. That velocity will be calculated by the 
stage aswell as the jerk and acceleration
=========================================
"""
#%%
'''
Creates sin dither
'''
total_time  = 5 #time in seconds
number_of_cycles = 3
amplitude = 5

PVT_arr = np.zeros((2*number_of_cycles+1,3))

#creaitng the times for each segment
PVT_arr[0,0]= total_time/(8*number_of_cycles)
PVT_arr[-1,0]= total_time/(8*number_of_cycles)
PVT_arr[1:-1,0]= total_time/(4*number_of_cycles)

#creating the positions for each segment
PVT_arr[0,1]= amplitude/2
PVT_arr[-1,1]= amplitude/2
PVT_arr[1:-1:2,1]= - amplitude
PVT_arr[2:-2:2,1]=  amplitude

print(PVT_arr)

#%%
'''
creates trigangular dither
'''
amplitude = .001
step_size = 0.0001
total_time = 100
number_cycles = 9
time = total_time/number_cycles

number_of_steps = int(2*amplitude/step_size)
velocity = amplitude*2/time


#find stopping points
first_stop_index = int(number_of_steps /4)
second_stop_index = int(first_stop_index + number_of_steps /2)
last_stop_index = int(number_of_steps)

#create constant displacement steps at a constant time 
PVT_arr = np.zeros((number_of_steps,3))
PVT_arr[:,0]= time/number_of_steps
PVT_arr[:first_stop_index,1]= step_size
PVT_arr[first_stop_index:second_stop_index,1] = -step_size
PVT_arr[second_stop_index:,1] = step_size

#set the velocity for each segment of the waveform
PVT_arr[:first_stop_index-1,2] = velocity
PVT_arr[first_stop_index:second_stop_index-1,2] = -velocity
PVT_arr[second_stop_index:,2] = velocity

PVT_arr1 = np.concatenate((PVT_arr,)*number_cycles)


print(len(PVT_arr1))
#set the last velocity to zero
PVT_arr1[-1,2] = 0
print(PVT_arr1)
#%%



output_folder = "C:\Data and Code\PVT Files"  # Specify the desired folder path
os.makedirs(output_folder, exist_ok=True)

# Create the text file in the output folder
output_file = os.path.join(output_folder, 'PVT1.trj')
with open(output_file, 'w') as file:
    for row in PVT_arr1:
        line = ', '.join(str(element) for element in row)
        file.write(line + '\n')
